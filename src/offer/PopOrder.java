package offer;

import java.util.ArrayList;
import java.util.Queue;
import java.util.Stack;

/**
 * 题目描述
 * 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
 * 假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
 * 但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
 */
public class PopOrder {

    public boolean IsPopOrder(int[] pushA, int[] popA) {
        if (pushA.length != popA.length) {
            return false;
        }
        int length = pushA.length;
        Stack<Integer> stack = new Stack<>();
        int pushIndex = 0;
        for (int pop : popA) {
            if (stack.isEmpty() || stack.peek() != pop) {
                while (pushIndex < length) {
                    if (pushA[pushIndex] == pop) {
                        pushIndex++;
                        break;
                    } else {
                        stack.push(pushA[pushIndex++]);
                    }
                }
                if (pushIndex == length) {
                    return false;
                }

            } else {
                stack.pop();
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(new PopOrder().IsPopOrder(new int[]{}, new int[]{}));

    }
}
